Array:
Arrayde eyni ad altinda eyni tipde olan deyerler saxlanilir. Arrayin uzunlugu sabitdir. Deyismek olmur. Arrayin elementlerini indexlerle elde edirik.
Big o ->  access: O(1), search: O(n), insertion: O(n), deletion: O(n)
Arrayde elementlerin indexleri 0dan baslayir. Sebeb: Arrayde elementler ardicil duzulur. Elementleri adresslemek baximindan 0-dan baslamasi daha metiqlidir. Adress = BaseAdress + (index * sizeOfDataType). Index 0-dan basladigi ucun, ilk elementin adresi BaseAdresse beraber olur.

LinkedList:
Linkedlistin Arrayden ferqli olaraq, size i dinamik deyise bilir. Arrayden element sildikde hemin elementin yeri bos qalir, bir nov yaddasdan bosuna istifade edilmis olur.
Linkedlist de elementlerin yaddasda yeri ayri olur. Linkedlist node lardan ibaretdir. Her bir node ozunde deyyer ve sonraki node un refernce ni tutur.
3 nov linkedlist var: singly, doubly, circular. Javada default doubly linkedlistdir.
Big o ->  access: O(n), search: O(n), insertion: O(n), deletion: O(n)
Memory efficient (XOR) double linkedlist: Bele linkedlistde value ve previous + next nodelarin bitwise operatorlarla hesablanmis deyerleri saxlanilir.

Hashtable:
Hashtable ele bir ds novudur ki, index datanin ozunden hesablanir. Bu hesablanma hash funksiyalari(alqoritmleri) sayesinde bas verir. Datalar unordered olur.
Collision - eyni indexe ferqli datalarin dusmesi. 2 novu var: open addressing, chaining.
Open addressing - eyni indexe dusecek data novbeti bos indexe yerlesdirilir. Eger index sonuncu indexdirse, 0-ci indexe qaytarilaraq yeniden bir-bir bos index axtarilir.
Chaining - eyni indexe dusen datalar linkedlist kimi birbirine baglanir.
Big o -> access: O(1), search: O(1), insertion: O(1), deletion: O(1) ortalamasi ucun. Amma eger collisionlar cox olarsa, big o -> access: O(n), search: O(n), insertion: O(n), deletion: O(n) olur.

Stack:
LIFO - Last in first out. Stackde elementler yuxaridan elave olunur ve yuxaridan silinir. Stackde 2 əsas emeliyyat var: push, pop.
Underflow - bos stackden element silmek isteyende.
Overflow - dolu stacke element elave etmek isteyende.
Push - element elave etmek, Pop - element silmek.
Big o -> access: O(n), search: O(n), insertion: O(1), deletion: O(1)

Queue:
FIFO - First in first out. Queue de elementler yuxaridan elave olunur, asagidan silinir. Queue de 2 əsas emeliyyat var: enqueue, dequeue.
Enqueue - element elave etmek, Dequeue - element silmek.
Big o -> access: O(n), search: O(n), insertion: O(1), deletion: O(1)
Priority Queue - Adi queue den ferqli olaraq, elementler sorted duzulur.

Tree:
Tree linkedlistden ferqli olaraq, bir node in birden cox child i ola bilir. Tree de 2 əsas node var: root, leaf.
Binary Tree - Her bir node un en cox 2 child i ola bilir.
Binary Search Tree - Her bir node un sol child i ondan kicik, sag child i ondan boyuk olmalidir.
Big o -> access: O(log n), search: O(log n), insertion: O(log n), deletion: O(log n)
Tree de traversal 3 novdur: inorder, preorder, postorder.
Preorder - root, left, right
     A
    / \
   B   C
  / \   \
 D   E   F
Preorder - A, B, D, E, C, F

Inorder - left, root, right
     A
    / \
   B   C
  / \   \
 D   E   F
Inorder - D, B, E, A, C, F

Postorder - left, right, root
     A
    / \
   B   C
  / \   \
 D   E   F
Postorder - D, E, B, F, C, A

