Procedural programming:
 1. Program funksiyalardan ibaretdir
 2. Data gizledirmir, bu da ozluyunde tightly couplinge getirib cixarir. Esas diqqet funkisyalara yoneldilirir
 3.Overloading, inheritance, codun yeniden isledilmesi yoxdur.

Obyektler real world entitylerdir. Obyektler iki seye malik olur: behavior(functionality) ve properties.
Class yaradilacaq obyekt ucun skeleton ve ya blueprint temin edir. Classin daxilinde behavior ve properties ler yazilir. Classlar class keywordu ile yazilir.
 

Abstraction - Meselen, masinda tormoza basiriq ve masinin sureti getdikce azalir. Lakin biz masinin suretinin nece azaldigini bilmirik. O bizim ucun abstrackt formadadir.
Abstraction-da internal implementation gizledir ve usere ancaq en onemli funksionalliq, yeni suretin azalmasi(tormoz) teqdim edilir.
Abstractionin advantagelari security ve developere verdiyi rahatliqdir.

Encapsulation - datanin kapsullenmesi ve data uzerinde kontrolun 1 unitden idare olunmasidir.
Encapsulation -> private propertyler ve public getter/setterlar
Encapsulationin advantagelari loosely coupled koddur, beleki bir propertynin deyeri diger classlardaki eyni propertynin deyerine tesir etmir. Encapsulation daha yaxsi access controlu temin edir.
 
 
Inheritance - bir classin basqa bir classin property ve behaviorunu inherit, yeni irsiyyetle alma xususiyyeti. Irsiyyet veren Parent class, irsiyyet alan Child class hesab olunur.
Inheritancein muxtelif novleri var:
1. Single - child class -> parent class, vessalam, bir dene inheritance
2. Multi-level - classA -> classB -> classC ve s. inheritance sanki zincir seklinde davam edir.
3. Hierarchical - classB extends edir classA, hemcinin classC extends edir classA
4. Multiple - classC eyni anda extends edir classA ve classB. Hansiki bu hal Javada qebul olunmur. Javada bu diamond problem adlanir. Beleki parent classlarda eyni metod olsa, child class basa dusmur ki, hansi classin xususiyyetini inherit edim.
Inheritancein ustunlukleri:
1. Kodun reusabilitylini artirir.
2. Polimorfizm inheritance in sayesinde bas verir.


Polimorfizm - bir metodun ferqli situasiyalarda ferqli cur davranmasidir. Meselen, bir kisi evinde ata, stadionda azarkes, is yerinde isci kimi davrana biler.
Polimorfizmin novleri:
1. Static polimorfizm/Metod overloading/compile time - overloading metod adlari eyni, amma parametr saylari ferqli ve ya saylari eyni olarsa, tipleri ferqli olarken bas verir. Java metod parameterleri compile time da basa dusur. Return type in overloading tesiri yoxdur.
2. Dynamic polimorfizm/Metod overriding/run time - child class da parent classdan inherit edilen metodun ezilmesi, child classa gore body hissesinin teyin olunmasi.

Objects relationships
1. Is a - inheritance la bu relation a nail olmaq olur.
2. Has a - Bir classda diger classi variable kimi teyin etmek 

Relation olunmus obyetler arasindaki assosasiya:
1. Aggregation - bir obyektin end olunmasi diger obyektin end olunmasi demek deyil. Meselen, mektebde 100 dene sagird ola biler. Bir sagirdi silsem (end olunsa) mekteb silinmeyecek.
2. Composition - bir obyektin end olunmasi diger obyektin end olunmasina sebeb olur. Meselen, mektebin otaqlari var. Mektebi silsek, tebii ki, otaqlarda silinecek.

JVM - Abstract masindir, fiziki olaraq movcud deyil.
 Java program flow: 
Java programi compile olunur ve bytecode cevrilir. JVM bytecode oxuyur, onlari masin kodu(1 ve 0) cevirir. Masin kodu CPU terefinden oxunur ve biz outputu gore bilirik.
 Java platformdan asili deyil, lakin JVM platformdan asilidir, beleki her platform ucun xususi JVM lazimdir. Elimizde eger compiledan yaranmis bytecode varsa, biz bu bytecodeu istenilen JVM de calisdira bilerik. Bu uzden Java platform bagimsizdir.
JRE - JRE = JVM + class libraries. Class libraries Javada olan kitabxanalardir.
JDK - Kod yaza bilmek ucun lazim olan ortami temin edir. JDKya programming language, compiler, debugger daxildir. JDK = JRE + prog. lang + compiler + debugger

Java static typed ve strong typed dildir.

primitiv typelar: char, byte, short, int, long, float, double, boolean

1. char: 2 byte(16 bit) yer tutur. ASCII character setini destekiliyir. Range: 0 to 65535
                                    char c = 'A';
                                    char c = 65; // ASCII deyeri.
                                    char c = '\u0041'; // Unicode deyeri. Her ucunun sout-da A cixacaq
2. byte: 1 byte yer tutur. Range: -128 to 127, default value: 0
                                    byte b = 100;
                                    byte b = 128; // compile error

TODO: signed 2's complement arasdir
Default deyerler ancaq class member variabler-da olur.

  public void testLocalVariable(){
    int x;
    System.out.println(x); // compile error
  }

3.short: 2 byte yer tutur. Range: -32768 to 32767, default value: 0
                                    short s = 100;
                                    short s = 32768; // compile error

4.int: 4 byte yer tutur. Range: -2^31 to 2^31-1, default value: 0
                                    int i = 100;
                                    int i = 2147483648; // compile error

5.long: 8 byte yer tutur. Range: -2^63 to 2^63-1, default value: 0L

6.float: 4 byte yer tutur. Range: 1.4e-45 to 3.4e+38, default value: 0.0f
                                    float f = 10.5f;
                                    float f = 10.5; // compile error

7.double: 8 byte yer tutur. Range: 4.9e-324 to 1.8e+308, default value: 0.0d

8.boolean: 1 bit yer tutur. true ve ya false deyerlerini tutur. default value: false
                                    boolean b = true;
                                    boolean b = 0; // compile error

Casting(conversion):
1. Widening, upcasting: byte -> short -> int -> long -> float -> double
     Meselen, int i = 100; long l = i dogru castdir.
2. Narrowing, downcasting: double -> float -> long -> int -> short -> byte
        Meselen, double d = 100.5; int i = (int) d dogru castdir.
        int i = 128;
        byte b = (byte) i;
        System.out.println(b); bu zaman -128 cixacaq. 128 alinmir deye rang-in evveline qayidacaq.

        byte a = 23;
        byte b = 34;
        byte c = a + b; // compile error
        Javada byte, short tipinde olanlar arasinda aritmetik emeliyyatlar edende, emeliyyatdan evvel byte ve short int-e promotion olunur. Ve netice int tipinde oludugu ucun casting lazimdir.
        byte a = 23;
        byte b = 34;
        byte c = (byte)(a + b);


Static ve instance variablelar:
Static deyerler obyektler arasinda paylasilir. Instance deyerler ise her bir onyektin ozune aid olur.

Reference type: Class, interface, array, String

Array reference tipidir, hansi ki, yaddasda eyni tipde olan deyerlerin ardicilligini saxlayir.

Access modifiers:
Protected: Oz yerlesdiyi paketdeki classlar ve child classlardan accessi var.
Default: Oz yerlesdiyi paketdeki classlardan accessi var. Child classlardan accessi yoxdur.

Method hiding: Parent ve child classda eyni static metodlar var. Her bir method oz classlari ile cagirilir.

Utility method, yalniz argument qebul edib uzerinde is goren metodlari static metodlar kimi yazmaq olar.

Varargs: Methodun argumentlerine istediyimiz qeder argument gondere bilerik. Methodun son argumenti varargs olmalidir. Her metodun yalniz bir varargs argumenti ola biler.
